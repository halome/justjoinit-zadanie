name: Bump DEV patch version after merging to UAT

on:
  push:
    branches:
      - uat

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{secrets.BOT_ACCESS_TOKEN}}

      - name: Set up Node.js
        if: env.IS_DEV == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: install octokit
        run: npm install @octokit/action --force

      - name: Get last commit message
        id: get-last-commit-message
        run: |
          last_commit_message=$(git log -1 --pretty=format:%s)

          echo "last_commit_message=${last_commit_message}" >> $GITHUB_OUTPUT
          echo "dev_branch_name=${{ github.repository_owner }}/dev" >> $GITHUB_OUTPUT

      - name: Check if changes come from dev branch
        if: contains(steps.get-last-commit-message.outputs.last_commit_message, steps.get-last-commit-message.outputs.dev_branch_name)
        run: echo "IS_DEV=true" >> $GITHUB_ENV

      - name: Checkout dev branch
        if: env.IS_DEV == 'true'
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Set git user identity
        if: env.IS_DEV == 'true'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@github.com"

      - name: Bump version and push changes to dev-bump-version-patch branch
        if: env.IS_DEV == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }} # Ustawienie tajemniczego tokenu dostępu
        run: |
          # Tworzenie nowej gałęzi i zmiana wersji
          git checkout -b dev-bump-version-patch
          npm version patch --force

          # Pushowanie zmian do gałęzi dev-bump-version-patch
          git push origin dev-bump-version-patch --force --no-verify

      - name: 'Grab dev version'
        id: 'grab-dev-version'
        run: |
          new_dev_version=$(git log -1 --pretty=%B)
          echo "new_dev_version=${new_dev_version}" >> $GITHUB_OUTPUT

      - name: Create PR for dev-bump-version-patch using github-script
        id: create-pr
        if: env.IS_DEV == 'true'
        env:
          DEV_VERSION: ${{ steps.grab-dev-version.outputs.new_dev_version }}
          OAUTH_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }} # Ustawienie tajemniczego tokenu dostępu
          USER_ACCESS_TOKEN: ${{ secrets.USER_ACCESS_TOKEN }} # Ustawienie tajemniczego tokenu dostępu
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const script = require('./test.js')

            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `DEV ${process.env.DEV_VERSION}`,
              head: 'dev-bump-version-patch',
              base: 'dev',
              body: [
                'This PR is auto-generated to bump dev patch version after uat release',
                '[actions/github-script](https://github.com/actions/github-script)',
              ].join('\n'),
            });

            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'dev-bump-version-patch',
              base: 'dev',
              state: 'open',
            });

            const pull_number = pr.number || pulls.data[0].number;
            const auth_token = process.env.OAUTH_TOKEN;

            await script({ context, pull_number, auth_token });

#            const curlCommand = `curl -L -X PUT
#              -H "Accept: application/vnd.github+json"
#              -H "Authorization: Bearer ${process.env.OAUTH_TOKEN}"
#              -H "X-GitHub-Api-Version: 2022-11-28" ${url}
#              -d '{"commit_title":"Expand enum","commit_message":"Add a new value to the merge_method enum"}'`;
#
#            execSync(curlCommand);

#      - name: Push changes to dev branch using curl
#        if: env.IS_DEV == 'true'
#        env:
#          USER_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          OWNER: ${{ github.repository_owner }}
#          REPO: ${{ github.repository }}
#          PULL_REQUEST: ${{ steps.create-pr.outputs.result }}
#        run: |
#          curl -L \
#            -X PUT \
#            -H "Accept: application/vnd.github+json" \
#            -H "Authorization: Bearer ${{ env.USER_ACCESS_TOKEN }}" \
#            -H "X-GitHub-Api-Version: 2022-11-28" \
#            https://api.github.com/repos/${{ env.OWNER }}/${{ env.REPO }}/pulls/${{ env.PULL_REQUEST}}/merge \
#            -d '{"commit_title":"Expand enum","commit_message":"Add a new value to the merge_method enum"}'

# - name: 'Create PR'
#   uses: actions/github-script@v6
#   env:
#     DEV_VERSION: ${{ steps.grab-dev-version.outputs.new_dev_version }}
#   with:
#     script: |
#       const { repo, owner } = context.repo;

#       const pulls = await github.rest.pulls.list({
#         owner: owner,
#         repo: repo,
#         head: 'dev-bump-version-patch',
#         base: 'dev',
#         state: 'open',
#       });

#       if (pulls.data.length < 1) {
#         await github.rest.pulls.create({
#           title: `DEV ${process.env.DEV_VERSION}`,
#           owner: owner,
#           repo: repo,
#           head: 'dev-bump-version-patch',
#           base: 'dev',
#           body: [
#             'This PR is auto-generated to bump dev patch version after uat release',
#             '[actions/github-script](https://github.com/actions/github-script)',
#           ].join('\n'),
#         });
#       } else {
#         const existingPR = pulls.data[0];
#         await github.rest.pulls.update({
#           owner: owner,
#           repo: repo,
#           pull_number: existingPR.number,
#           body: [
#             existingPR.body,
#             `Updated by Job ${context.job}`,
#           ].join('\n'),
#         });
#       }

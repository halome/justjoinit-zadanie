name: Bump DEV patch version after merging to UAT

on:
  push:
    branches:
      - uat

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{secrets.BOT_ACCESS_TOKEN}}

      - name: Set up Node.js
        if: env.IS_DEV == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get last commit message
        id: get-last-commit-message
        run: |
          last_commit_message=$(git log -1 --pretty=format:%s)

          echo "last_commit_message=${last_commit_message}" >> $GITHUB_OUTPUT
          echo "dev_branch_name=${{ github.repository_owner }}/dev" >> $GITHUB_OUTPUT

      - name: Check if changes come from dev branch
        if: contains(steps.get-last-commit-message.outputs.last_commit_message, steps.get-last-commit-message.outputs.dev_branch_name)
        run: echo "IS_DEV=true" >> $GITHUB_ENV

      - name: Checkout dev branch
        if: env.IS_DEV == 'true'
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Set git user identity
        if: env.IS_DEV == 'true'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@github.com"

      - name: Bump version and push changes to dev branch
        if: env.IS_DEV == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }} # Ustawienie tajemniczego tokenu dostępu
        run: |
          # Tworzenie nowej gałęzi i zmiana wersji
          git checkout -b dev-bump-version-patch
          npm version patch --force

          # Pushowanie zmian do gałęzi dev-bump-version-patch
          git push origin dev-bump-version-patch --force --no-verify

          # Utworzenie pull requesta z gałęzi dev-bump-version-patch do gałęzi dev
          TITLE="Bump version and push changes to dev"
          BODY="This PR was created automatically to bump the version and push changes to the dev branch."
          BRANCH=dev-bump-version-patch
          BASE=dev
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls"
          PR_DATA="{\"title\":\"${TITLE}\",\"body\":\"${BODY}\",\"head\":\"${BRANCH}\",\"base\":\"${BASE}\"}"
          PR_RESPONSE=$(curl -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/json" -d "${PR_DATA}" ${URL})
          PR_NUMBER=$(echo ${PR_RESPONSE} | jq -r '.number')

          # Mergowanie pull requesta
          PR_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${PR_NUMBER}/merge"
          MERGE_DATA="{\"commit_title\":\"Merge ${BRANCH} into ${BASE}\",\"sha\":\"${GITHUB_SHA}\"}"
          curl -X PUT -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/json" -d "${MERGE_DATA}" ${PR_URL}

    # - name: 'Grab dev version'
    #   id: 'grab-dev-version'
    #   run: |
    #     new_dev_version=$(git log -1 --pretty=%B)
    #     echo "new_dev_version=${new_dev_version}" >> $GITHUB_OUTPUT

    # - name: 'Create PR'
    #   uses: actions/github-script@v6
    #   env:
    #     DEV_VERSION: ${{ steps.grab-dev-version.outputs.new_dev_version }}
    #   with:
    #     script: |
    #       const { repo, owner } = context.repo;

    #       const pulls = await github.rest.pulls.list({
    #         owner: owner,
    #         repo: repo,
    #         head: 'dev-bump-version-patch',
    #         base: 'dev',
    #         state: 'open',
    #       });

    #       if (pulls.data.length < 1) {
    #         await github.rest.pulls.create({
    #           title: `DEV ${process.env.DEV_VERSION}`,
    #           owner: owner,
    #           repo: repo,
    #           head: 'dev-bump-version-patch',
    #           base: 'dev',
    #           body: [
    #             'This PR is auto-generated to bump dev patch version after uat release',
    #             '[actions/github-script](https://github.com/actions/github-script)',
    #           ].join('\n'),
    #         });
    #       } else {
    #         const existingPR = pulls.data[0];
    #         await github.rest.pulls.update({
    #           owner: owner,
    #           repo: repo,
    #           pull_number: existingPR.number,
    #           body: [
    #             existingPR.body,
    #             `Updated by Job ${context.job}`,
    #           ].join('\n'),
    #         });
    #       }
